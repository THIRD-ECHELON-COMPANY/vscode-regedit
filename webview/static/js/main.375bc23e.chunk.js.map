{"version":3,"sources":["VsCodeApi.js","components/AddressBar.js","components/KeysTreeView.js","components/ValuesList.js","components/Regedit.js","App.js","reportWebVitals.js","i18n.js","index.js"],"names":["VsCodeApi","acquireVsCodeApi","StyledInput","styled","Input","AddressBar","t","useTranslation","useState","address","setAddress","onMessage","useCallback","event","setNewAddress","newAddress","setState","postMessage","command","title","replace","message","data","key","retrievedKey","normalizeAddress","userAddress","normalized","trim","match","useEvent","value","onChange","onKeyDown","normalizedAddress","text","placeholder","NewItemIconButton","IconButton","$visible","NewKeyIconButton","props","newKeyDialogOpen","setNewKeyDialogOpen","newKeyName","setNewKeyName","isValidKeyName","name","includes","postCreateKey","currentRegKey","onClick","icon","faPlus","color","circle","hovered","Modal","backdrop","size","open","onClose","stopPropagation","onDoubleClick","onMouseDown","onMouseUp","Title","Body","Footer","Button","appearance","disabled","TreeStyleWrapper","div","KeysTreeNode","nodeLabel","nodeRegKey","nodeIsSelected","editingValue","setEditingValue","applyRename","newName","newSubKey","deleteConfitmationOpen","setDeleteConfitmationOpen","button","preventDefault","autoFocus","onBlur","children","KeysTreeView","treeKey","setTreeKey","label","setData","treeValue","setTreeValue","onSetKeyTreeAndValues","newData","tree","length","mappedData","mapData","prefix","map","item","rootKey","rootChildren","find","x","onSetSubKeys","targetKey","subData","subKeys","undefined","copyRecursiveWithSubKeys","dataToCopy","startsWith","push","Object","assign","onCreateKeyDone","createdKey","copyRecursiveWithAdded","iterKey","foundNext","newValue","slice","onRenameKeyDone","oldKey","newKey","copyRecursiveWithRename","onDeleteKeyDone","deletedKey","copyRecursiveWithoutDeleted","setHovered","height","width","onMouseEnter","onMouseLeave","Tree","virtualized","defaultExpandAll","style","maxHeight","renderTreeNode","nodeData","onExpand","expandItemValues","activeNode","onSelect","NewValueIconButton","newValueDialogOpen","setNewValueDialogOpen","newValueName","setNewValueName","newValueType","setNewValueType","newValueData","setNewValueData","isValidValueData","postCreateValue","type","onInputKeyDown","SelectPicker","defaultValue","searchable","cleanable","marginTop","CustomTableCell","Table","Cell","CustomTableCellText","ValueNameCell","rowData","dataKey","currentKey","faDatabase","faCalculator","faFileAlt","oldName","valueName","marginRight","ValueDataCell","editingData","setEditingData","applySetData","oldData","parseInt","toString","padStart","ValuesList","setCurrentKey","values","Error","concat","filter","Column","resizable","HeaderCell","RegeditWrapper","$hidden","RegeditSplit","Split","RegeditSplitPanel","Regedit","ready","initialDataPending","setInitialDataPending","useEffect","pending","savedState","getState","sizes","cursor","gutterSize","snapOffset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","i18n","use","Backend","initReactI18next","init","lng","document","querySelector","getAttribute","fallbackLng","interpolation","escapeValue","react","useSuspense","backend","loadPath","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.375bc23e.chunk.js","sourcesContent":["/* global acquireVsCodeApi */\r\n\r\nconst VsCodeApi = typeof acquireVsCodeApi !== 'undefined' ? acquireVsCodeApi() : null;\r\n\r\nexport default VsCodeApi;\r\n","import styled from 'styled-components';\r\nimport { useState, useCallback } from 'react';\r\nimport { useEvent } from 'react-use';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Input } from 'rsuite';\r\nimport VsCodeApi from '../VsCodeApi';\r\n\r\nconst StyledInput = styled(Input)`\r\n  margin-top: 5px;\r\n`;\r\n\r\nfunction AddressBar() {\r\n  const { t } = useTranslation();\r\n\r\n  const [address, setAddress] = useState('');\r\n\r\n  const onMessage = useCallback(event => {\r\n    const setNewAddress = newAddress => {\r\n      VsCodeApi.setState({ address: newAddress });\r\n      VsCodeApi.postMessage({\r\n        command: 'setTitle',\r\n        title: newAddress.replace(/^.*\\\\/, '')\r\n      });\r\n      setAddress(newAddress);\r\n    };\r\n\r\n    const message = event.data;\r\n    switch (message.command) {\r\n      case 'setKeyValues':\r\n        setNewAddress(message.key);\r\n        break;\r\n\r\n      case 'setKeyTreeAndValues':\r\n        setNewAddress(message.retrievedKey);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  const normalizeAddress = useCallback(userAddress => {\r\n    let normalized = userAddress.trim();\r\n    normalized = normalized.replace(/^Computer\\\\/i, '');\r\n    normalized = normalized.replace(/^HKCR(\\\\|$)/i, 'HKEY_CLASSES_ROOT$1');\r\n    normalized = normalized.replace(/^HKCU(\\\\|$)/i, 'HKEY_CURRENT_USER$1');\r\n    normalized = normalized.replace(/^HKLM(\\\\|$)/i, 'HKEY_LOCAL_MACHINE$1');\r\n    normalized = normalized.replace(/^HKU(\\\\|$)/i, 'HKEY_USERS$1');\r\n    normalized = normalized.replace(/^HKCC(\\\\|$)/i, 'HKEY_CURRENT_CONFIG$1');\r\n    if (!normalized.match(/^(HKEY_CLASSES_ROOT|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKEY_CURRENT_CONFIG)(\\\\|$)/i)) {\r\n      return null;\r\n    }\r\n\r\n    normalized = normalized.replace(/\\\\+$/, '');\r\n    normalized = normalized.replace(/\\\\{2,}/g, '\\\\');\r\n\r\n    return normalized;\r\n  }, []);\r\n\r\n  useEvent('message', onMessage);\r\n\r\n  return (\r\n    <StyledInput\r\n      value={address}\r\n      onChange={value => setAddress(value)}\r\n      onKeyDown={event => {\r\n        if (event.key === 'Enter') {\r\n          const normalizedAddress = normalizeAddress(address);\r\n          if (normalizedAddress) {\r\n            VsCodeApi.postMessage({\r\n              command: 'getKeyTreeAndValues',\r\n              key: normalizedAddress\r\n            });\r\n          } else {\r\n            VsCodeApi.postMessage({\r\n              command: 'alert',\r\n              text: t('addressBar.invalidRegistryPath')\r\n            });\r\n          }\r\n        }\r\n      }}\r\n      placeholder={t('addressBar.registryPath')}\r\n    />\r\n  );\r\n}\r\n\r\nexport default AddressBar;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { useEvent } from 'react-use';\r\nimport { useTranslation } from 'react-i18next';\r\nimport styled from 'styled-components';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { Tree, IconButton, Modal, Button, Input } from 'rsuite';\r\nimport VsCodeApi from '../VsCodeApi';\r\n\r\nconst NewItemIconButton = styled(IconButton)`\r\n  visibility: ${({ $visible }) => $visible ? 'visible' : 'hidden'};\r\n  opacity: ${({ $visible }) => $visible ? 1 : 0};\r\n  transition: visibility 0s, opacity 0.5s linear;\r\n  position: absolute !important;\r\n  right: 20px;\r\n  bottom: 20px;\r\n  z-index: 1;\r\n`;\r\n\r\nfunction NewKeyIconButton(props) {\r\n  const { t } = useTranslation();\r\n\r\n  const [newKeyDialogOpen, setNewKeyDialogOpen] = useState(false);\r\n\r\n  const [newKeyName, setNewKeyName] = useState('');\r\n\r\n  const isValidKeyName = name => name !== '' && !name.includes('\\\\');\r\n\r\n  const postCreateKey = () => {\r\n    VsCodeApi.postMessage({\r\n      command: 'createKey',\r\n      key: props.currentRegKey + '\\\\' + newKeyName\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NewItemIconButton\r\n        onClick={() => {\r\n          setNewKeyName('');\r\n          setNewKeyDialogOpen(true);\r\n        }}\r\n        icon={<FontAwesomeIcon icon={faPlus} />}\r\n        color=\"blue\"\r\n        circle\r\n        $visible={props.hovered && !newKeyDialogOpen}\r\n      />\r\n\r\n      <Modal\r\n        backdrop={true}\r\n        size='xs'\r\n        open={newKeyDialogOpen}\r\n        onClose={() => setNewKeyDialogOpen(false)}\r\n        // Stop propogating events, what the library should be doing...\r\n        onClick={event => event.stopPropagation()}\r\n        onDoubleClick={event => event.stopPropagation()}\r\n        onMouseDown={event => event.stopPropagation()}\r\n        onMouseUp={event => event.stopPropagation()}\r\n      >\r\n        <Modal.Title>\r\n          {t('keysTreeView.newKeyModal.title')}\r\n        </Modal.Title>\r\n        <Modal.Body>\r\n          <Input\r\n            value={newKeyName}\r\n            onChange={value => setNewKeyName(value)}\r\n            onKeyDown={event => {\r\n              if (event.key === 'Enter' && isValidKeyName(newKeyName)) {\r\n                postCreateKey();\r\n                setNewKeyDialogOpen(false);\r\n              }\r\n            }}\r\n            placeholder={t('keysTreeView.newKeyModal.newKeyName')}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => {\r\n              postCreateKey();\r\n              setNewKeyDialogOpen(false);\r\n            }}\r\n            appearance='primary'\r\n            disabled={!isValidKeyName(newKeyName)}\r\n          >\r\n            {t('keysTreeView.newKeyModal.create')}\r\n          </Button>\r\n          <Button\r\n            onClick={() => setNewKeyDialogOpen(false)}\r\n            appearance='subtle'\r\n          >\r\n            {t('keysTreeView.newKeyModal.cancel')}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst TreeStyleWrapper = styled.div`\r\n  .rs-tree-node-label-content {\r\n    // No word wrapping for long names.\r\n    white-space: nowrap;\r\n  }\r\n\r\n  .ReactVirtualized__Grid {\r\n    // Allow to scroll horizontally.\r\n    overflow: auto !important;\r\n  }\r\n\r\n  .ReactVirtualized__Grid__innerScrollContainer {\r\n    // Allow to scroll horizontally.\r\n    position: unset !important;\r\n  }\r\n\r\n  .rs-tree-nodes {\r\n    // Fix resizing.\r\n    height: 100%;\r\n  }\r\n\r\n  .rs-tree-node-label-content {\r\n    // Remove padding, move it to child div for mouse events (see below).\r\n    padding: 0 !important;\r\n  }\r\n\r\n  .rs-tree-node-label-content > div {\r\n    // Steal padding from the parent for mouse events (see above).\r\n    padding: 6px 12px 6px 8px;\r\n  }\r\n`;\r\n\r\nconst initialData = () => [\r\n  {\r\n    label: 'Computer',\r\n    value: '',\r\n    children: [\r\n      {\r\n        label: 'HKEY_CLASSES_ROOT',\r\n        value: 'HKEY_CLASSES_ROOT',\r\n        children: []\r\n      },\r\n      {\r\n        label: 'HKEY_CURRENT_USER',\r\n        value: 'HKEY_CURRENT_USER',\r\n        children: []\r\n      },\r\n      {\r\n        label: 'HKEY_LOCAL_MACHINE',\r\n        value: 'HKEY_LOCAL_MACHINE',\r\n        children: []\r\n      },\r\n      {\r\n        label: 'HKEY_USERS',\r\n        value: 'HKEY_USERS',\r\n        children: []\r\n      },\r\n      {\r\n        label: 'HKEY_CURRENT_CONFIG',\r\n        value: 'HKEY_CURRENT_CONFIG',\r\n        children: []\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nfunction KeysTreeNode({ nodeLabel, nodeRegKey, nodeIsSelected, ...props }) {\r\n  const { t } = useTranslation();\r\n\r\n  const [editingValue, setEditingValue] = useState(null);\r\n\r\n  const applyRename = () => {\r\n    const oldName = nodeLabel;\r\n    const newName = editingValue;\r\n    if (newName !== '' && newName !== oldName) {\r\n      VsCodeApi.postMessage({\r\n        command: 'renameKey',\r\n        key: nodeRegKey,\r\n        newSubKey: newName\r\n      });\r\n    }\r\n  };\r\n\r\n  const [deleteConfitmationOpen, setDeleteConfitmationOpen] = useState(false);\r\n\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        if (nodeIsSelected && nodeRegKey.includes('\\\\')) {\r\n          setEditingValue(nodeLabel);\r\n        }\r\n      }}\r\n      onMouseDown={event => {\r\n        if (event.button === 1) {\r\n          // Middle click.\r\n          // Only allow to remove non-root subkeys.\r\n          if (nodeRegKey.includes('\\\\')) {\r\n            setDeleteConfitmationOpen(true);\r\n            event.preventDefault();\r\n          }\r\n        }\r\n      }}\r\n    >\r\n      {editingValue !== null ?\r\n        <Input\r\n          size='xs'\r\n          autoFocus\r\n          value={editingValue}\r\n          onChange={value => setEditingValue(value)}\r\n          onKeyDown={event => {\r\n            if (event.key === 'Enter') {\r\n              setEditingValue(null);\r\n              applyRename();\r\n            } else if (event.key === 'Escape') {\r\n              setEditingValue(null);\r\n            }\r\n          }}\r\n          placeholder={t('keysTreeView.keyName')}\r\n          onBlur={() => {\r\n            setEditingValue(null);\r\n            applyRename();\r\n          }}\r\n        />\r\n        :\r\n        props.children\r\n      }\r\n\r\n      <Modal\r\n        backdrop={true}\r\n        size='xs'\r\n        open={deleteConfitmationOpen}\r\n        onClose={() => setDeleteConfitmationOpen(false)}\r\n        // Stop propogating events, what the library should be doing...\r\n        onClick={event => event.stopPropagation()}\r\n        onDoubleClick={event => event.stopPropagation()}\r\n        onMouseDown={event => event.stopPropagation()}\r\n        onMouseUp={event => event.stopPropagation()}\r\n      >\r\n        <Modal.Title>\r\n          {t('keysTreeView.confirmDeleteKeyModal.title')}\r\n        </Modal.Title>\r\n        <Modal.Body>\r\n          {t('keysTreeView.confirmDeleteKeyModal.text', { key: nodeLabel })}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => {\r\n              VsCodeApi.postMessage({\r\n                command: 'deleteKey',\r\n                key: nodeRegKey\r\n              });\r\n              setDeleteConfitmationOpen(false);\r\n            }}\r\n            appearance='primary'\r\n          >\r\n            {t('global.yes')}\r\n          </Button>\r\n          <Button\r\n            onClick={() => setDeleteConfitmationOpen(false)}\r\n            appearance='subtle'\r\n          >\r\n            {t('global.no')}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction KeysTreeView() {\r\n  const { t } = useTranslation();\r\n\r\n  const [treeKey, setTreeKey] = useState(0);\r\n\r\n  const [data, setData] = useState(initialData());\r\n\r\n  const [treeValue, setTreeValue] = useState('');\r\n\r\n  const onSetKeyTreeAndValues = useCallback(message => {\r\n    const mapData = (data, prefix = '') => data.map(item => ({\r\n      label: item.name,\r\n      value: prefix + item.name,\r\n      children: item.children && mapData(item.children, prefix + item.name + '\\\\')\r\n    }));\r\n\r\n    let newData = initialData();\r\n    if (message.tree.length > 0) {\r\n      const mappedData = mapData(message.tree);\r\n      const rootKey = mappedData[0].value;\r\n      const rootChildren = mappedData[0].children;\r\n\r\n      newData[0].children.find(x => x.value === rootKey).children = rootChildren;\r\n    }\r\n\r\n    setData(newData);\r\n    setTreeValue(message.retrievedKey);\r\n    setTreeKey(treeKey + 1); // a hack to remount the element\r\n  }, [treeKey]);\r\n\r\n  const onSetSubKeys = useCallback(message => {\r\n    const targetKey = message.key;\r\n    const subData = message.subKeys.length === 0 ? undefined : message.subKeys.map(item => ({\r\n      label: item,\r\n      value: targetKey + '\\\\' + item,\r\n      children: []\r\n    }));\r\n\r\n    const copyRecursiveWithSubKeys = dataToCopy => {\r\n      let newData = [];\r\n      for (const item of dataToCopy) {\r\n        if (item.value === targetKey) {\r\n          newData.push(Object.assign({}, item, {\r\n            children: subData\r\n          }));\r\n          continue;\r\n        }\r\n\r\n        if (item.value === '' || targetKey.startsWith(item.value + '\\\\')) {\r\n          newData.push(Object.assign({}, item, {\r\n            children: item.children && copyRecursiveWithSubKeys(item.children)\r\n          }));\r\n          continue;\r\n        }\r\n\r\n        newData.push(item);\r\n      }\r\n\r\n      return newData;\r\n    };\r\n\r\n    const newData = copyRecursiveWithSubKeys(data);\r\n    setData(newData);\r\n  }, [data]);\r\n\r\n  const onCreateKeyDone = useCallback(message => {\r\n    const createdKey = message.key;\r\n\r\n    const copyRecursiveWithAdded = (dataToCopy, iterKey = '') => {\r\n      let newData = [];\r\n      let foundNext = false;\r\n      for (const item of dataToCopy || []) {\r\n        if (item.value === createdKey) {\r\n          foundNext = true;\r\n        } else if (item.value === '' || createdKey.startsWith(item.value + '\\\\')) {\r\n          foundNext = true;\r\n          newData.push(Object.assign({}, item, {\r\n            children: copyRecursiveWithAdded(item.children, item.value)\r\n          }));\r\n          continue;\r\n        }\r\n\r\n        newData.push(item);\r\n      }\r\n\r\n      if (!foundNext && iterKey !== '' && (dataToCopy === undefined || dataToCopy.length > 0)) {\r\n        const newValue = createdKey.slice((iterKey + '\\\\').length).replace(/\\\\.*$/, '');\r\n        newData.push({\r\n          label: newValue,\r\n          value: iterKey + '\\\\' + newValue,\r\n          children: undefined\r\n        });\r\n      }\r\n\r\n      return newData;\r\n    };\r\n\r\n    const newData = copyRecursiveWithAdded(data);\r\n    setData(newData);\r\n  }, [data]);\r\n\r\n  const onRenameKeyDone = useCallback(message => {\r\n    const oldKey = message.key;\r\n    const newSubKey = message.newSubKey;\r\n    const newKey = oldKey.replace(/\\\\[^\\\\]+$/, '\\\\' + newSubKey);\r\n\r\n    if (treeValue === oldKey || treeValue.startsWith(oldKey + '\\\\')) {\r\n      setTreeValue(newKey);\r\n      VsCodeApi.postMessage({\r\n        command: 'getKeyValues',\r\n        key: newKey\r\n      });\r\n    }\r\n\r\n    const copyRecursiveWithRename = dataToCopy => {\r\n      let newData = [];\r\n      for (const item of dataToCopy) {\r\n        if (item.value === oldKey || item.value.startsWith(oldKey + '\\\\')) {\r\n          newData.push(Object.assign({}, item, {\r\n            label: item.value === oldKey ? newSubKey : item.label,\r\n            value: newKey + item.value.slice(oldKey.length),\r\n            children: item.children && copyRecursiveWithRename(item.children)\r\n          }));\r\n          continue;\r\n        }\r\n\r\n        if (item.value === '' || oldKey.startsWith(item.value + '\\\\')) {\r\n          newData.push(Object.assign({}, item, {\r\n            children: item.children && copyRecursiveWithRename(item.children)\r\n          }));\r\n          continue;\r\n        }\r\n\r\n        newData.push(item);\r\n      }\r\n\r\n      return newData;\r\n    };\r\n\r\n    const newData = copyRecursiveWithRename(data);\r\n    setData(newData);\r\n  }, [data, treeValue]);\r\n\r\n  const onDeleteKeyDone = useCallback(message => {\r\n    const deletedKey = message.key;\r\n\r\n    if (treeValue === deletedKey || treeValue.startsWith(deletedKey + '\\\\')) {\r\n      const newKey = deletedKey.replace(/\\\\[^\\\\]+$/, '');\r\n      setTreeValue(newKey);\r\n      VsCodeApi.postMessage({\r\n        command: 'getKeyValues',\r\n        key: newKey\r\n      });\r\n    }\r\n\r\n    const copyRecursiveWithoutDeleted = dataToCopy => {\r\n      let newData = [];\r\n      for (const item of dataToCopy) {\r\n        if (item.value === deletedKey) {\r\n          continue;\r\n        }\r\n\r\n        if (item.value === '' || deletedKey.startsWith(item.value + '\\\\')) {\r\n          newData.push(Object.assign({}, item, {\r\n            children: item.children && copyRecursiveWithoutDeleted(item.children)\r\n          }));\r\n          continue;\r\n        }\r\n\r\n        newData.push(item);\r\n      }\r\n\r\n      return newData.length > 0 ? newData : undefined;\r\n    };\r\n\r\n    const newData = copyRecursiveWithoutDeleted(data);\r\n    setData(newData);\r\n  }, [data, treeValue]);\r\n\r\n  const onMessage = useCallback(event => {\r\n    const message = event.data;\r\n    switch (message.command) {\r\n      case 'setKeyTreeAndValues':\r\n        onSetKeyTreeAndValues(message);\r\n        break;\r\n\r\n      case 'setSubKeys':\r\n        onSetSubKeys(message);\r\n        break;\r\n\r\n      case 'createKeyDone':\r\n        onCreateKeyDone(message);\r\n        break;\r\n\r\n      case 'renameKeyDone':\r\n        onRenameKeyDone(message);\r\n        break;\r\n\r\n      case 'deleteKeyDone':\r\n        onDeleteKeyDone(message);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }, [onSetKeyTreeAndValues, onSetSubKeys, onCreateKeyDone, onRenameKeyDone, onDeleteKeyDone]);\r\n\r\n  useEvent('message', onMessage);\r\n\r\n  const [hovered, setHovered] = useState(false);\r\n\r\n  return (\r\n    <AutoSizer>\r\n      {({ height, width }) => (\r\n        <TreeStyleWrapper\r\n          onMouseEnter={() => setHovered(true)}\r\n          onMouseLeave={() => setHovered(false)}\r\n        >\r\n          <NewKeyIconButton currentRegKey={treeValue} hovered={hovered} />\r\n          {[treeKey].map(key =>\r\n            <Tree\r\n              key={key}\r\n              virtualized\r\n              defaultExpandAll\r\n              data={data}\r\n              value={treeValue}\r\n              height={height}\r\n              style={{ maxHeight: height, width: width }}\r\n              renderTreeNode={nodeData => (\r\n                <KeysTreeNode\r\n                  nodeLabel={nodeData.label}\r\n                  nodeRegKey={nodeData.value}\r\n                  nodeIsSelected={nodeData.value !== '' && nodeData.value === treeValue}\r\n                >\r\n                  {nodeData.value === '' ? t('keysTreeView.computer') : nodeData.label}\r\n                </KeysTreeNode>\r\n              )}\r\n              onExpand={(expandItemValues, activeNode) => {\r\n                if (activeNode.children && activeNode.children.length === 0) {\r\n                  VsCodeApi.postMessage({\r\n                    command: 'getSubKeys',\r\n                    key: activeNode.value\r\n                  });\r\n                }\r\n              }}\r\n              onSelect={(activeNode, value) => {\r\n                if (value !== '' && value !== treeValue) {\r\n                  setTreeValue(value);\r\n                  VsCodeApi.postMessage({\r\n                    command: 'getKeyValues',\r\n                    key: value\r\n                  });\r\n                }\r\n                if (activeNode.children && activeNode.children.length === 0) {\r\n                  VsCodeApi.postMessage({\r\n                    command: 'getSubKeys',\r\n                    key: activeNode.value\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n          )}\r\n        </TreeStyleWrapper>\r\n      )}\r\n    </AutoSizer>\r\n  );\r\n};\r\n\r\nexport default KeysTreeView;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { useEvent } from 'react-use';\r\nimport { useTranslation } from 'react-i18next';\r\nimport styled from 'styled-components';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCalculator, faFileAlt, faDatabase, faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { Table, IconButton, Input, Modal, Button, SelectPicker } from 'rsuite';\r\nimport VsCodeApi from '../VsCodeApi';\r\n\r\nconst NewItemIconButton = styled(IconButton)`\r\n  visibility: ${({ $visible }) => $visible ? 'visible' : 'hidden'};\r\n  opacity: ${({ $visible }) => $visible ? 1 : 0};\r\n  transition: visibility 0s, opacity 0.5s linear;\r\n  position: absolute !important;\r\n  left: 20px;\r\n  bottom: 20px;\r\n  z-index: 1;\r\n`;\r\n\r\nfunction NewValueIconButton(props) {\r\n  const { t } = useTranslation();\r\n\r\n  const [newValueDialogOpen, setNewValueDialogOpen] = useState(false);\r\n\r\n  const [newValueName, setNewValueName] = useState('');\r\n  const [newValueType, setNewValueType] = useState('');\r\n  const [newValueData, setNewValueData] = useState('');\r\n\r\n  const isValidValueData = () => newValueType !== '';\r\n\r\n  const postCreateValue = () => {\r\n    VsCodeApi.postMessage({\r\n      command: 'createValue',\r\n      key: props.currentRegKey,\r\n      name: newValueName,\r\n      type: newValueType,\r\n      data: newValueData\r\n    });\r\n  };\r\n\r\n  const onInputKeyDown = event => {\r\n    if (event.key === 'Enter' && isValidValueData()) {\r\n      postCreateValue();\r\n      setNewValueDialogOpen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NewItemIconButton\r\n        onClick={() => {\r\n          setNewValueName('');\r\n          setNewValueType('');\r\n          setNewValueData('');\r\n          setNewValueDialogOpen(true);\r\n        }}\r\n        icon={<FontAwesomeIcon icon={faPlus} />}\r\n        color=\"blue\"\r\n        circle\r\n        $visible={props.hovered && !newValueDialogOpen}\r\n      />\r\n\r\n      <Modal\r\n        backdrop={true}\r\n        size='xs'\r\n        open={newValueDialogOpen}\r\n        onClose={() => setNewValueDialogOpen(false)}\r\n        // Stop propogating events, what the library should be doing...\r\n        onClick={event => event.stopPropagation()}\r\n        onDoubleClick={event => event.stopPropagation()}\r\n        onMouseDown={event => event.stopPropagation()}\r\n        onMouseUp={event => event.stopPropagation()}\r\n      >\r\n        <Modal.Title>\r\n          {t('valuesList.newValueModal.title')}\r\n        </Modal.Title>\r\n        <Modal.Body>\r\n          <Input\r\n            value={newValueName}\r\n            onChange={value => setNewValueName(value)}\r\n            onKeyDown={onInputKeyDown}\r\n            placeholder={t('valuesList.newValueModal.newValueName')}\r\n          />\r\n          <SelectPicker\r\n            value={newValueType}\r\n            onChange={value => setNewValueType(value)}\r\n            data={[\r\n              {\r\n                label: t('valuesList.newValueModal.types.dword') + ' (REG_DWORD)',\r\n                value: 'REG_DWORD'\r\n              },\r\n              {\r\n                label: t('valuesList.newValueModal.types.string') + ' (REG_SZ)',\r\n                value: 'REG_SZ'\r\n              },\r\n              {\r\n                label: t('valuesList.newValueModal.types.expandableString') + ' (REG_EXPAND_SZ)',\r\n                value: 'REG_EXPAND_SZ'\r\n              },\r\n              {\r\n                label: t('valuesList.newValueModal.types.multiString') + ' (REG_MULTI_SZ)',\r\n                value: 'REG_MULTI_SZ'\r\n              },\r\n              {\r\n                label: t('valuesList.newValueModal.types.binaryData') + ' (REG_BINARY)',\r\n                value: 'REG_BINARY'\r\n              },\r\n              {\r\n                label: 'REG_NONE',\r\n                value: 'REG_NONE'\r\n              },\r\n              {\r\n                label: 'REG_DWORD_BIG_ENDIAN',\r\n                value: 'REG_DWORD_BIG_ENDIAN'\r\n              },\r\n              {\r\n                label: 'REG_LINK',\r\n                value: 'REG_LINK'\r\n              },\r\n              {\r\n                label: 'REG_RESOURCE_LIST',\r\n                value: 'REG_RESOURCE_LIST'\r\n              },\r\n              {\r\n                label: 'REG_FULL_RESOURCE_DESCRIPTOR',\r\n                value: 'REG_FULL_RESOURCE_DESCRIPTOR'\r\n              },\r\n              {\r\n                label: 'REG_RESOURCE_REQUIREMENTS_LIST',\r\n                value: 'REG_RESOURCE_REQUIREMENTS_LIST'\r\n              },\r\n              {\r\n                label: 'REG_QWORD',\r\n                value: 'REG_QWORD'\r\n              }\r\n            ]}\r\n            defaultValue=''\r\n            searchable={false}\r\n            cleanable={false}\r\n            style={{ width: '100%', marginTop: '5px' }}\r\n            placeholder={t('valuesList.newValueModal.selectValueType')}\r\n          />\r\n          <Input\r\n            value={newValueData}\r\n            onChange={value => setNewValueData(value)}\r\n            onKeyDown={onInputKeyDown}\r\n            placeholder={t('valuesList.newValueModal.insertValueData')}\r\n            style={{ marginTop: '5px' }}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => {\r\n              postCreateValue();\r\n              setNewValueDialogOpen(false);\r\n            }}\r\n            appearance='primary'\r\n            disabled={!isValidValueData(newValueName)}\r\n          >\r\n            {t('valuesList.newValueModal.create')}\r\n          </Button>\r\n          <Button\r\n            onClick={() => setNewValueDialogOpen(false)}\r\n            appearance='subtle'\r\n          >\r\n            {t('valuesList.newValueModal.cancel')}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst CustomTableCell = styled(Table.Cell)`\r\n  .rs-table-cell-content {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst CustomTableCellText = styled.div`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nfunction ValueNameCell({ rowData, dataKey, currentKey, ...props }) {\r\n  const { t } = useTranslation();\r\n\r\n  let icon = faDatabase;\r\n  let color = 'var(--vscode-charts-orange)';\r\n  switch (rowData['type']) {\r\n    case 'REG_DWORD':\r\n    case 'REG_QWORD':\r\n      icon = faCalculator;\r\n      color = 'var(--vscode-charts-green)';\r\n      break;\r\n\r\n    case 'REG_SZ':\r\n    case 'REG_EXPAND_SZ':\r\n    case 'REG_MULTI_SZ':\r\n      icon = faFileAlt;\r\n      color = 'var(--vscode-charts-purple)';\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const [editingValue, setEditingValue] = useState(null);\r\n\r\n  const applyRename = () => {\r\n    const oldName = rowData.name;\r\n    const newName = editingValue;\r\n    if (newName !== oldName) {\r\n      VsCodeApi.postMessage({\r\n        command: 'renameValue',\r\n        key: currentKey,\r\n        oldName,\r\n        newName\r\n      });\r\n    }\r\n  };\r\n\r\n  const [deleteConfitmationOpen, setDeleteConfitmationOpen] = useState(false);\r\n\r\n  const valueName = rowData[dataKey] || t('valuesList.defaultName');\r\n\r\n  return (\r\n    <CustomTableCell {...props}\r\n      onClick={() => setEditingValue(rowData[dataKey])}\r\n      onMouseDown={event => {\r\n        if (event.button === 1) {\r\n          // Middle click.\r\n          setDeleteConfitmationOpen(true);\r\n        }\r\n      }}\r\n    >\r\n      <FontAwesomeIcon icon={icon} style={{ color, marginRight: '8px' }} />\r\n      {editingValue !== null ?\r\n        <Input\r\n          autoFocus\r\n          value={editingValue}\r\n          onChange={value => setEditingValue(value)}\r\n          onKeyDown={event => {\r\n            if (event.key === 'Enter') {\r\n              setEditingValue(null);\r\n              applyRename();\r\n            } else if (event.key === 'Escape') {\r\n              setEditingValue(null);\r\n            }\r\n          }}\r\n          placeholder={t('valuesList.columnNames.name')}\r\n          onBlur={() => {\r\n            setEditingValue(null);\r\n            applyRename();\r\n          }}\r\n        />\r\n        :\r\n        <CustomTableCellText>\r\n          {valueName}\r\n        </CustomTableCellText>\r\n      }\r\n\r\n      <Modal\r\n        backdrop={true}\r\n        size='xs'\r\n        open={deleteConfitmationOpen}\r\n        onClose={() => setDeleteConfitmationOpen(false)}\r\n        // Stop propogating events, what the library should be doing...\r\n        onClick={event => event.stopPropagation()}\r\n        onDoubleClick={event => event.stopPropagation()}\r\n        onMouseDown={event => event.stopPropagation()}\r\n        onMouseUp={event => event.stopPropagation()}\r\n      >\r\n        <Modal.Title>\r\n          {t('valuesList.confirmDeleteValueModal.title')}\r\n        </Modal.Title>\r\n        <Modal.Body>\r\n          {t('valuesList.confirmDeleteValueModal.text', { value: valueName })}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => {\r\n              VsCodeApi.postMessage({\r\n                command: 'deleteValue',\r\n                key: currentKey,\r\n                name: rowData.name\r\n              });\r\n              setDeleteConfitmationOpen(false);\r\n            }}\r\n            appearance='primary'\r\n          >\r\n            {t('global.yes')}\r\n          </Button>\r\n          <Button\r\n            onClick={() => setDeleteConfitmationOpen(false)}\r\n            appearance='subtle'\r\n          >\r\n            {t('global.no')}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </CustomTableCell>\r\n  );\r\n}\r\n\r\nfunction ValueDataCell({ rowData, dataKey, currentKey, ...props }) {\r\n  const { t } = useTranslation();\r\n\r\n  const [editingData, setEditingData] = useState(null);\r\n\r\n  const applySetData = () => {\r\n    const oldData = rowData.value;\r\n    const newData = typeof oldData === 'number' ? parseInt(editingData) : editingData;\r\n    if (oldData !== newData) {\r\n      VsCodeApi.postMessage({\r\n        command: 'setValueData',\r\n        key: currentKey,\r\n        type: rowData.type,\r\n        name: rowData.name,\r\n        data: newData\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CustomTableCell {...props} onClick={() => setEditingData(rowData[dataKey])}>\r\n      {editingData !== null ?\r\n        <Input\r\n          autoFocus\r\n          value={editingData}\r\n          onChange={value => setEditingData(value)}\r\n          onKeyDown={event => {\r\n            if (event.key === 'Enter') {\r\n              setEditingData(null);\r\n              applySetData();\r\n            } else if (event.key === 'Escape') {\r\n              setEditingData(null);\r\n            }\r\n          }}\r\n          placeholder={t('valuesList.columnNames.value')}\r\n          onBlur={() => {\r\n            setEditingData(null);\r\n            applySetData();\r\n          }}\r\n        />\r\n        :\r\n        <CustomTableCellText>\r\n          {typeof rowData[dataKey] === 'number' ?\r\n            '0x' + rowData[dataKey].toString(16).padStart(8, '0') + ' (' + rowData[dataKey].toString() + ')'\r\n            :\r\n            rowData[dataKey]\r\n          }\r\n        </CustomTableCellText>\r\n      }\r\n    </CustomTableCell>\r\n  );\r\n}\r\n\r\nfunction ValuesList() {\r\n  const { t } = useTranslation();\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  const [currentKey, setCurrentKey] = useState('');\r\n\r\n  const onMessage = useCallback(event => {\r\n    const message = event.data;\r\n    switch (message.command) {\r\n      case 'setKeyValues':\r\n        setData(message.values);\r\n        setCurrentKey(message.key);\r\n        break;\r\n\r\n      case 'setKeyTreeAndValues':\r\n        setData(message.values);\r\n        setCurrentKey(message.retrievedKey);\r\n        break;\r\n\r\n      case 'renameValueDone':\r\n        if (message.key !== currentKey) {\r\n          throw new Error(`Expected data for ${currentKey}, got data for ${message.key}`);\r\n        }\r\n\r\n        setData(data.map(x => {\r\n          if (x.name === message.oldName) {\r\n            return Object.assign({}, x, { name: message.newName });\r\n          }\r\n\r\n          return x;\r\n        }));\r\n        break;\r\n\r\n      case 'createValueDone':\r\n        if (message.key !== currentKey) {\r\n          throw new Error(`Expected data for ${currentKey}, got data for ${message.key}`);\r\n        }\r\n\r\n        setData(data.concat([{\r\n          name: message.name,\r\n          type: message.type,\r\n          value: message.data\r\n        }]));\r\n        break;\r\n\r\n      case 'setValueDataDone':\r\n        if (message.key !== currentKey) {\r\n          throw new Error(`Expected data for ${currentKey}, got data for ${message.key}`);\r\n        }\r\n\r\n        setData(data.map(x => {\r\n          if (x.name === message.name) {\r\n            return Object.assign({}, x, { value: message.newData });\r\n          }\r\n\r\n          return x;\r\n        }));\r\n        break;\r\n\r\n      case 'deleteValueDone':\r\n        if (message.key !== currentKey) {\r\n          throw new Error(`Expected data for ${currentKey}, got data for ${message.key}`);\r\n        }\r\n\r\n        setData(data.filter(x => x.name !== message.name));\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }, [currentKey, data]);\r\n\r\n  useEvent('message', onMessage);\r\n\r\n  const [hovered, setHovered] = useState(false);\r\n\r\n  return (\r\n    <AutoSizer>\r\n      {({ height, width }) => (\r\n        <div\r\n          onMouseEnter={() => setHovered(true)}\r\n          onMouseLeave={() => setHovered(false)}\r\n        >\r\n          <NewValueIconButton currentRegKey={currentKey} hovered={hovered} />\r\n          <Table\r\n            virtualized\r\n            data={data}\r\n            height={height}\r\n            style={{ width: width }}\r\n          >\r\n            <Table.Column width={200} resizable>\r\n              <Table.HeaderCell>{t('valuesList.columnNames.name')}</Table.HeaderCell>\r\n              <ValueNameCell dataKey=\"name\" currentKey={currentKey} />\r\n            </Table.Column>\r\n\r\n            <Table.Column width={150} resizable>\r\n              <Table.HeaderCell>{t('valuesList.columnNames.type')}</Table.HeaderCell>\r\n              <Table.Cell dataKey=\"type\" />\r\n            </Table.Column>\r\n\r\n            <Table.Column width={300} resizable>\r\n              <Table.HeaderCell>{t('valuesList.columnNames.value')}</Table.HeaderCell>\r\n              <ValueDataCell dataKey=\"value\" currentKey={currentKey} />\r\n            </Table.Column>\r\n          </Table>\r\n        </div>\r\n      )}\r\n    </AutoSizer>\r\n  );\r\n}\r\n\r\nexport default ValuesList;\r\n","import styled from 'styled-components';\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { useEvent } from 'react-use';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Split from 'react-split';\r\nimport AddressBar from './AddressBar';\r\nimport KeysTreeView from './KeysTreeView';\r\nimport ValuesList from './ValuesList';\r\nimport VsCodeApi from '../VsCodeApi';\r\n\r\nconst RegeditWrapper = styled.div`\r\n  display: ${({ $hidden }) => $hidden ? 'none' : 'flex'};\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  width: 100%;\r\n`;\r\n\r\nconst RegeditSplit = styled(Split)`\r\n  display: flex;\r\n  height: 100%;\r\n  .gutter {\r\n    cursor: ew-resize;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: var(--vscode-panelSection-border);\r\n    background-clip: content-box;\r\n  }\r\n`;\r\n\r\nconst RegeditSplitPanel = styled.div`\r\n  overflow: hidden;\r\n`;\r\n\r\nfunction Regedit() {\r\n  const { ready } = useTranslation();\r\n\r\n  const [initialDataPending, setInitialDataPending] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let pending = false;\r\n    if (VsCodeApi) {\r\n      const savedState = VsCodeApi.getState();\r\n      if (savedState && savedState.address) {\r\n        VsCodeApi.postMessage({\r\n          command: 'getKeyTreeAndValues',\r\n          key: savedState.address\r\n        });\r\n        pending = true;\r\n      }\r\n    }\r\n\r\n    setInitialDataPending(pending);\r\n  }, []);\r\n\r\n  const onMessage = useCallback(event => {\r\n    const message = event.data;\r\n    switch (message.command) {\r\n      case 'setKeyTreeAndValues':\r\n        setInitialDataPending(false);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  useEvent('message', onMessage);\r\n\r\n  return (\r\n    <RegeditWrapper $hidden={initialDataPending || !ready}>\r\n      <AddressBar />\r\n      <RegeditSplit\r\n        sizes={[25, 75]}\r\n        cursor=''\r\n        gutterSize={11}\r\n        snapOffset={0}\r\n      >\r\n        <RegeditSplitPanel>\r\n          <KeysTreeView />\r\n        </RegeditSplitPanel>\r\n        <RegeditSplitPanel>\r\n          <ValuesList />\r\n        </RegeditSplitPanel>\r\n      </RegeditSplit>\r\n    </RegeditWrapper>\r\n  );\r\n}\r\n\r\nexport default Regedit;\r\n","import Regedit from './components/Regedit';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Regedit />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-http-backend';\r\n\r\n//console.log('Locale:', document.querySelector('body').getAttribute('data-locale'));\r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    lng: document.querySelector('body').getAttribute('data-locale'),\r\n    fallbackLng: 'en',\r\n    //debug: true,\r\n\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n\r\n    react: {\r\n      useSuspense: false,\r\n    },\r\n\r\n    backend: {\r\n      // Use a relative load path.\r\n      loadPath: './locales/{{lng}}/{{ns}}.json',\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './i18n';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}